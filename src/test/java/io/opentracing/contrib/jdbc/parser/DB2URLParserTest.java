/*
 * Copyright 2017-2021 The OpenTracing Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package io.opentracing.contrib.jdbc.parser;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;

import io.opentracing.contrib.jdbc.ConnectionInfo;
import org.junit.Test;

/**
 * Test for {@link DB2URLParser}
 *
 * @author oburgosm
 * @since 0.2.12
 */
public class DB2URLParserTest {

  @Test
  public void testMatchFull() {
    String url = "jdbc:db2://myhost.mydomain.com:50000/MYINSTANCE:retrieveMessagesFromServerOnGetMessage=true;useIdentityValLocalForAutoGeneratedKeys=true;";
    ConnectionInfo connectionInfo = URLParser.parse(url);
    assertThat(connectionInfo, is(not(equalTo(ConnectionInfo.UNKNOWN_CONNECTION_INFO))));
    assertThat(connectionInfo.getDbPeer(), is(equalTo("myhost.mydomain.com:50000")));
    assertThat(connectionInfo.getDbInstance(), is(equalTo("MYINSTANCE")));
    assertThat(connectionInfo.getDbType(), is(equalTo("db2")));
  }

  @Test
  public void testMatchWithoutOptions() {
    String url = "jdbc:db2://myhost.mydomain.com:50000/MYINSTANCE";
    ConnectionInfo connectionInfo = URLParser.parse(url);
    assertThat(connectionInfo, is(not(equalTo(ConnectionInfo.UNKNOWN_CONNECTION_INFO))));
    assertThat(connectionInfo.getDbPeer(), is(equalTo("myhost.mydomain.com:50000")));
    assertThat(connectionInfo.getDbInstance(), is(equalTo("MYINSTANCE")));
    assertThat(connectionInfo.getDbType(), is(equalTo("db2")));
  }

  @Test
  public void testMatchWithoutPort() {
    String url = "jdbc:db2://myhost.mydomain.com/MYINSTANCE";
    ConnectionInfo connectionInfo = URLParser.parse(url);
    assertThat(connectionInfo, is(not(equalTo(ConnectionInfo.UNKNOWN_CONNECTION_INFO))));
    assertThat(connectionInfo.getDbPeer(), is(equalTo("myhost.mydomain.com")));
    assertThat(connectionInfo.getDbInstance(), is(equalTo("MYINSTANCE")));
    assertThat(connectionInfo.getDbType(), is(equalTo("db2")));
  }

  @Test
  public void testNotMatch() {
    String url = "jdbc:db2:notmatching";
    ConnectionInfo connectionInfo = URLParser.parse(url);
    assertThat(connectionInfo, is(equalTo(ConnectionInfo.UNKNOWN_CONNECTION_INFO)));
  }

}
